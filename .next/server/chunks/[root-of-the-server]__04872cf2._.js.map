{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///Users/sunilbhargava/portfolio-backtesting-app/src/app/api/market-cap/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\n// Default shares outstanding for major companies (fallback data)\nconst DEFAULT_SHARES_OUTSTANDING: { [key: string]: number } = {\n  'AAPL.US': 15441000000,     // Apple Inc.\n  'MSFT.US': 7430000000,      // Microsoft Corporation\n  'GOOGL.US': 12700000000,    // Alphabet Inc. Class A\n  'GOOG.US': 12700000000,     // Alphabet Inc. Class C\n  'AMZN.US': 10700000000,     // Amazon.com Inc.\n  'TSLA.US': 3160000000,      // Tesla Inc.\n  'META.US': 2540000000,      // Meta Platforms Inc.\n  'NVDA.US': 24700000000,     // NVIDIA Corporation\n  'BRK-B.US': 1450000000,     // Berkshire Hathaway Inc. Class B\n  'LLY.US': 954000000,        // Eli Lilly and Company\n  'V.US': 2130000000,         // Visa Inc.\n  'UNH.US': 930000000,        // UnitedHealth Group Incorporated\n  'MA.US': 960000000,         // Mastercard Incorporated\n  'HD.US': 1040000000,        // The Home Depot Inc.\n  'JNJ.US': 2400000000,       // Johnson & Johnson\n  'PG.US': 2370000000,        // The Procter & Gamble Company\n  'JPM.US': 2900000000,       // JPMorgan Chase & Co.\n  'XOM.US': 4200000000,       // Exxon Mobil Corporation\n  'CVX.US': 1900000000,       // Chevron Corporation\n  'ABBV.US': 1760000000,      // AbbVie Inc.\n  'WMT.US': 2710000000,       // Walmart Inc.\n  'KO.US': 4320000000,        // The Coca-Cola Company\n  'PEP.US': 1380000000,       // PepsiCo Inc.\n  'COST.US': 443000000,       // Costco Wholesale Corporation\n  'MRK.US': 2530000000,       // Merck & Co. Inc.\n  'BAC.US': 8200000000,       // Bank of America Corporation\n  'ADBE.US': 460000000,       // Adobe Inc.\n  'TMO.US': 390000000,        // Thermo Fisher Scientific Inc.\n  'ABT.US': 1760000000,       // Abbott Laboratories\n  'CRM.US': 1000000000,       // Salesforce Inc.\n  'NFLX.US': 440000000,       // Netflix Inc.\n  'ORCL.US': 2700000000,      // Oracle Corporation\n  'WFC.US': 3700000000,       // Wells Fargo & Company\n  'ACN.US': 630000000,        // Accenture plc\n  'DIS.US': 1830000000,       // The Walt Disney Company\n  'VZ.US': 4200000000,        // Verizon Communications Inc.\n  'CMCSA.US': 4100000000,     // Comcast Corporation\n  'COP.US': 1300000000,       // ConocoPhillips\n  'NKE.US': 1540000000,       // NIKE Inc.\n  'DHR.US': 760000000,        // Danaher Corporation\n  'TXN.US': 900000000,        // Texas Instruments Incorporated\n  'NEE.US': 2000000000,       // NextEra Energy Inc.\n  'UPS.US': 870000000,        // United Parcel Service Inc.\n  'RTX.US': 1500000000,       // Raytheon Technologies Corporation\n  'PM.US': 1550000000,        // Philip Morris International Inc.\n  'LOW.US': 680000000,        // Lowe's Companies Inc.\n  'LIN.US': 510000000,        // Linde plc\n  'AMGN.US': 530000000,       // Amgen Inc.\n  'QCOM.US': 1100000000,      // QUALCOMM Incorporated\n  'HON.US': 680000000,        // Honeywell International Inc.\n  'UNP.US': 630000000,        // Union Pacific Corporation\n  'T.US': 7100000000,         // AT&T Inc.\n  'AMD.US': 1600000000,       // Advanced Micro Devices Inc.\n  'INTU.US': 280000000,       // Intuit Inc.\n  'CAT.US': 510000000,        // Caterpillar Inc.\n  'IBM.US': 920000000,        // International Business Machines Corporation\n  'AMAT.US': 900000000,       // Applied Materials Inc.\n  'GS.US': 340000000,         // The Goldman Sachs Group Inc.\n  'BA.US': 590000000,         // The Boeing Company\n  'BLK.US': 150000000,        // BlackRock Inc.\n  'DE.US': 300000000,         // Deere & Company\n  'SYK.US': 380000000,        // Stryker Corporation\n  'MDT.US': 1350000000,       // Medtronic plc\n  'AXP.US': 730000000,        // American Express Company\n  'NOW.US': 200000000,        // ServiceNow Inc.\n  'GILD.US': 1250000000,      // Gilead Sciences Inc.\n  'C.US': 2000000000,         // Citigroup Inc.\n  'MU.US': 1100000000,        // Micron Technology Inc.\n  'TJX.US': 1170000000,       // The TJX Companies Inc.\n  'SCHW.US': 1840000000,      // The Charles Schwab Corporation\n  'PLD.US': 930000000,        // Prologis Inc.\n  'CB.US': 410000000,         // Chubb Limited\n  'BMY.US': 2100000000,       // Bristol-Myers Squibb Company\n  'MDLZ.US': 1370000000,      // Mondelez International Inc.\n  'SO.US': 1060000000,        // The Southern Company\n  'ISRG.US': 360000000,       // Intuitive Surgical Inc.\n  'ADI.US': 520000000,        // Analog Devices Inc.\n  'REGN.US': 110000000,       // Regeneron Pharmaceuticals Inc.\n  'ZTS.US': 460000000,        // Zoetis Inc.\n  'CI.US': 300000000,         // Cigna Corporation\n  'DUK.US': 770000000,        // Duke Energy Corporation\n  'MMM.US': 570000000,        // 3M Company\n  'AON.US': 220000000,        // Aon plc\n  'CSX.US': 2100000000,       // CSX Corporation\n  'USB.US': 1480000000,       // U.S. Bancorp\n  'PNC.US': 420000000,        // The PNC Financial Services Group Inc.\n  'EMR.US': 590000000,        // Emerson Electric Co.\n  'BSX.US': 1430000000,       // Boston Scientific Corporation\n  'NSC.US': 2300000000,       // Norfolk Southern Corporation\n  'SHW.US': 260000000,        // The Sherwin-Williams Company\n  'MCK.US': 150000000,        // McKesson Corporation\n  'ITW.US': 320000000,        // Illinois Tool Works Inc.\n  'ECL.US': 290000000,        // Ecolab Inc.\n  'COF.US': 420000000,        // Capital One Financial Corporation\n  'CL.US': 840000000,         // Colgate-Palmolive Company\n  'CME.US': 360000000,        // CME Group Inc.\n  'FCX.US': 1450000000,       // Freeport-McMoRan Inc.\n  'WM.US': 420000000,         // Waste Management Inc.\n  'SLB.US': 1400000000,       // Schlumberger Limited\n  'GD.US': 280000000,         // General Dynamics Corporation\n  'MCO.US': 190000000,        // Moody's Corporation\n  'TGT.US': 460000000,        // Target Corporation\n  'APD.US': 220000000,        // Air Products and Chemicals Inc.\n  'EMN.US': 220000000,        // Eastman Chemical Company\n  'BDX.US': 290000000,        // Becton Dickinson and Company\n  'EL.US': 360000000,         // The Estée Lauder Companies Inc.\n  'NOC.US': 160000000,        // Northrop Grumman Corporation\n  'ICE.US': 560000000,        // Intercontinental Exchange Inc.\n  'FDX.US': 260000000,        // FedEx Corporation\n  'SPY.US': 844000000,        // SPDR S&P 500 ETF Trust\n};\n\nfunction getDefaultSharesOutstanding(ticker: string): number {\n  // Ensure ticker has .US suffix\n  const formattedTicker = ticker.includes('.') ? ticker : `${ticker}.US`;\n  return DEFAULT_SHARES_OUTSTANDING[formattedTicker] || 1000000000; // 1B shares as fallback\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const ticker = searchParams.get('ticker');\n    const date = searchParams.get('date');\n\n    if (!ticker) {\n      return NextResponse.json(\n        { error: 'Ticker parameter is required' },\n        { status: 400 }\n      );\n    }\n\n    // Ensure ticker has .US suffix for EODHD API\n    const formattedTicker = ticker.includes('.') ? ticker : `${ticker}.US`;\n    \n    console.log(`📊 Fetching market cap data for ${formattedTicker}${date ? ` on ${date}` : ''}`);\n\n    // Get API token from environment\n    const apiToken = process.env.EODHD_API_TOKEN;\n    if (!apiToken || apiToken === 'your_eodhd_api_token_here') {\n      return NextResponse.json(\n        { \n          error: 'EODHD API token not configured',\n          message: 'Please set EODHD_API_TOKEN in your .env.local file'\n        },\n        { status: 500 }\n      );\n    }\n\n    // Build API URL\n    let apiUrl = `https://eodhd.com/api/eod/${formattedTicker}?api_token=${apiToken}&fmt=json`;\n    if (date) {\n      apiUrl += `&from=${date}&to=${date}`;\n    } else {\n      // Get latest data point\n      apiUrl += '&order=d&limit=1';\n    }\n\n    console.log(`🔗 API URL: ${apiUrl.replace(apiToken, 'HIDDEN')}`);\n\n    // Fetch data from EODHD\n    const response = await fetch(apiUrl, {\n      headers: {\n        'User-Agent': 'Portfolio-Backtesting/1.0'\n      }\n    });\n\n    if (!response.ok) {\n      console.error(`❌ EODHD API error: ${response.status} ${response.statusText}`);\n      return NextResponse.json(\n        { error: `EODHD API error: ${response.status} ${response.statusText}` },\n        { status: response.status }\n      );\n    }\n\n    const data = await response.json();\n    \n    if (!data || (Array.isArray(data) && data.length === 0)) {\n      console.warn(`⚠️  No data returned for ${formattedTicker}`);\n      return NextResponse.json(\n        { error: 'No data found for the specified ticker and date' },\n        { status: 404 }\n      );\n    }\n\n    // Handle both single object and array responses\n    const priceData = Array.isArray(data) ? data[0] : data;\n    \n    if (!priceData || !priceData.close) {\n      console.warn(`⚠️  Invalid price data for ${formattedTicker}`);\n      return NextResponse.json(\n        { error: 'Invalid price data received' },\n        { status: 404 }\n      );\n    }\n\n    // Extract price information\n    const price = parseFloat(priceData.close);\n    const adjustedPrice = parseFloat(priceData.adjusted_close || priceData.close);\n    const priceDate = priceData.date;\n\n    // Get shares outstanding (use default if not available from API)\n    const sharesOutstanding = getDefaultSharesOutstanding(formattedTicker);\n    \n    // Calculate market cap\n    const marketCap = adjustedPrice * sharesOutstanding;\n    const marketCapBillions = marketCap / 1e9;\n\n    // Format market cap for display\n    const formatMarketCap = (value: number): string => {\n      if (value >= 1e12) {\n        return `$${(value / 1e12).toFixed(2)}T`;\n      } else if (value >= 1e9) {\n        return `$${(value / 1e9).toFixed(2)}B`;\n      } else if (value >= 1e6) {\n        return `$${(value / 1e6).toFixed(2)}M`;\n      } else {\n        return `$${value.toFixed(0)}`;\n      }\n    };\n\n    const result = {\n      ticker: formattedTicker,\n      date: priceDate || date || new Date().toISOString().split('T')[0],\n      price: price,\n      adjusted_price: adjustedPrice,\n      shares_outstanding: sharesOutstanding,\n      market_cap: marketCap,\n      market_cap_billions: marketCapBillions,\n      formatted_market_cap: formatMarketCap(marketCap),\n      price_adjustment_note: adjustedPrice !== price ? \n        `Split/dividend adjusted price used (${((adjustedPrice / price - 1) * 100).toFixed(1)}% adjustment)` : \n        undefined\n    };\n\n    // Log successful requests\n    console.log(`✅ Success: ${formattedTicker} (${result.date}) - $${marketCapBillions.toFixed(1)}B`);\n    return NextResponse.json(result);\n    \n  } catch (error) {\n    console.error('❌ API Error:', {\n      message: error instanceof Error ? error.message : 'Unknown error',\n      timestamp: new Date().toISOString()\n    });\n    \n    const errorMessage = error instanceof Error ? error.message : 'Internal server error';\n    return NextResponse.json(\n      { error: errorMessage },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function OPTIONS(request: NextRequest) {\n  return new Response(null, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n    },\n  });\n}\n\n// Health check endpoint\nexport async function HEAD(request: NextRequest) {\n  try {\n    // Test if API token is configured\n    const apiToken = process.env.EODHD_API_TOKEN;\n    if (!apiToken || apiToken === 'your_eodhd_api_token_here') {\n      return new Response(null, {\n        status: 503,\n        headers: {\n          'X-Service-Status': 'misconfigured',\n          'Cache-Control': 'no-cache',\n        },\n      });\n    }\n\n    return new Response(null, {\n      status: 200,\n      headers: {\n        'X-Service-Status': 'healthy',\n        'Cache-Control': 'no-cache',\n      },\n    });\n  } catch (error) {\n    return new Response(null, {\n      status: 503,\n      headers: {\n        'X-Service-Status': 'unhealthy',\n        'Cache-Control': 'no-cache',\n      },\n    });\n  }\n}"],"names":[],"mappings":"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","debugId":null}}]
}